package com.adiro.nasm_ide;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class LogReader {
	
	RegistersView registers;
	SourceViewArea sourceArea;
	int currentStep = 0;
	private String filePrefix = "";
	
	public LogReader(RegistersView registers, SourceViewArea sourceArea) {
		this.registers = registers;
		this.sourceArea = sourceArea;
	}
	
	public boolean GoToNextLine(){
		
		Path path = Paths.get(getFileName());
		byte[] step = null;
		
		try {
			step = Files.readAllBytes(path);
		} catch (IOException e) {
			sourceArea.haltCode();
			return false;
		}
		
		
		sourceArea.goToLine(readRegister(step, 0));
		System.out.println("Linia: " + readRegister(step, 0));
		setRegisters(step);
		
		currentStep++;
		
		
		return true;
	}
	
	private void setRegisters(byte[] bytes) {
		
		registers.setAx(readRegister(bytes, 1));
		registers.setBx(readRegister(bytes, 2));
		registers.setCx(readRegister(bytes, 3));
		registers.setDx(readRegister(bytes, 4));
	}
	
	private int readRegister(byte[] bytes, int n) {

		
		
		
		int value = (int) (ConvertToUnsignedValue(bytes[2*n]) << 8);
		value += ConvertToUnsignedValue(bytes[2*n+1]);
		return value;
		
	}
	
	@SuppressWarnings("unused")
	private void printRegisters(byte[] bytes) {
		for(var register : bytes) {
			if(register < 0) {
				System.out.println(register+256);
			}
			else {
				System.out.println(register);
			}
		}
	}
	
	private int ConvertToUnsignedValue(byte signedByte) {
		
		final int bias = 256;
		
		if(signedByte < 0) {
			return (int)signedByte + bias;
		}
		return (int)signedByte;

	}
	
	private String getFileName() {
		var fileName = filePrefix + String.format("%05d", currentStep) + "DEB.LOG";
		System.out.print(fileName);
		return fileName;
	}
	
	public void setLogDirectory(String location) {
		filePrefix = location;
	}
	
}
